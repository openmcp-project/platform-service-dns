//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSServiceConfig) DeepCopyInto(out *DNSServiceConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSServiceConfig.
func (in *DNSServiceConfig) DeepCopy() *DNSServiceConfig {
	if in == nil {
		return nil
	}
	out := new(DNSServiceConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSServiceConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSServiceConfigList) DeepCopyInto(out *DNSServiceConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DNSServiceConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSServiceConfigList.
func (in *DNSServiceConfigList) DeepCopy() *DNSServiceConfigList {
	if in == nil {
		return nil
	}
	out := new(DNSServiceConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSServiceConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSServiceConfigSpec) DeepCopyInto(out *DNSServiceConfigSpec) {
	*out = *in
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(v1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.ExternalDNSForPurposes != nil {
		in, out := &in.ExternalDNSForPurposes, &out.ExternalDNSForPurposes
		*out = make([]ExternalDNSPurposeConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSServiceConfigSpec.
func (in *DNSServiceConfigSpec) DeepCopy() *DNSServiceConfigSpec {
	if in == nil {
		return nil
	}
	out := new(DNSServiceConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalDNSConfig) DeepCopyInto(out *ExternalDNSConfig) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalDNSConfig.
func (in *ExternalDNSConfig) DeepCopy() *ExternalDNSConfig {
	if in == nil {
		return nil
	}
	out := new(ExternalDNSConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalDNSPurposeConfig) DeepCopyInto(out *ExternalDNSPurposeConfig) {
	*out = *in
	if in.PurposeSelector != nil {
		in, out := &in.PurposeSelector, &out.PurposeSelector
		*out = new(PurposeSelector)
		(*in).DeepCopyInto(*out)
	}
	out.Config = in.Config
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalDNSPurposeConfig.
func (in *ExternalDNSPurposeConfig) DeepCopy() *ExternalDNSPurposeConfig {
	if in == nil {
		return nil
	}
	out := new(ExternalDNSPurposeConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PurposeSelector) DeepCopyInto(out *PurposeSelector) {
	*out = *in
	in.PurposeSelectorRequirement.DeepCopyInto(&out.PurposeSelectorRequirement)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PurposeSelector.
func (in *PurposeSelector) DeepCopy() *PurposeSelector {
	if in == nil {
		return nil
	}
	out := new(PurposeSelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PurposeSelectorRequirement) DeepCopyInto(out *PurposeSelectorRequirement) {
	*out = *in
	if in.And != nil {
		in, out := &in.And, &out.And
		*out = make([]PurposeSelectorRequirement, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Or != nil {
		in, out := &in.Or, &out.Or
		*out = make([]PurposeSelectorRequirement, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Not != nil {
		in, out := &in.Not, &out.Not
		*out = new(PurposeSelectorRequirement)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PurposeSelectorRequirement.
func (in *PurposeSelectorRequirement) DeepCopy() *PurposeSelectorRequirement {
	if in == nil {
		return nil
	}
	out := new(PurposeSelectorRequirement)
	in.DeepCopyInto(out)
	return out
}
